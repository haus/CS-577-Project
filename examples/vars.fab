{
	var a := @integer { 1 of 2 };
	var b := 1 + a[0];
	write(b)
[*	write(a[0])
	write(4 div a[0])
	var b1 := true;
	var b2 := false;
	var b3 := b1 and b2;
	
	var a:integer := 3;
	a := 5 mod 2;
	var b := a * 3 - 15 div 4;
	var c := -a;
	
	write(b1, b2, b3, a, b, c) *]
[*	var b := a div 2;
	var c := @integer{2 of 3, 3 of 2};
	var d := c;
	a := 4;
	write("a: ", a, " b: ", b, " 3*8: ", 3 * 8, " 5-7: ", 5 - 7, " 4 mod 3: ", 4 mod 3);

	func pow(base:real, exp:integer) -> real {
		if exp = 0 then
			return 1
		else
			return base * pow(base, exp - 1)
	};

	write("3/4: ", 3/4, ", 4.0 * 3: ", 4.0 * 3, ", pow(2.0,2): ", pow(2.0,2), ", pow(2,2): ", pow(2,2), ", pow(-3.75,0): ", pow(-3.75,0));

	write("3 > 1: ", 3 > 1, " 1 > 3: ", 1 > 3);
	write("3 >= 1: ", 3 >= 1, " 3 >= 3: ", 3 >= 3);

	write("3 < 1: ", 3 < 1, " 1 < 3: ", 1 < 3);
	write("3 <= 1: ", 3 <= 1, " 3 <= 3: ", 3 <= 3);

	write("3 = 1: ", 3 = 1, " 1 = 1: ", 1 = 1);
	write("3 <> 1: ", 3 <> 1, " 3 <> 3: ", 3 <> 3);

	write("true and true: ", true and true, "; true and false: ", true and false, "; true or false: ", true or false);
	write("true = true: ", true = true, "; true = false: ", true = false, "; true or false: ", true or false);

	write("c = d: ", c = d);
	d := @integer{5 of 7};
	write("c = d: ", c = d);

	write("c[1] = c[4]: ", c[1] = c[4], " c[1] = c[0]: ", c[1] = c[0]);
	
	if (false) then
		write("True")
	else
		write("False") *]
}